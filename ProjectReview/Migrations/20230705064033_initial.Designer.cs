// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectReview.Models;

#nullable disable

namespace ProjectReview.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230705064033_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectReview.Models.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime");

                    b.Property<int>("Density")
                        .HasColumnType("int");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsAssign")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("NumberPaper")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Signer")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documnet", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Handler", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("Handler", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("HostId")
                        .HasColumnType("bigint");

                    b.Property<long>("InstructorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("HostId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.JobProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberPaper")
                        .HasColumnType("int");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProfileId");

                    b.ToTable("JobProfile", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Opinion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("JobId");

                    b.ToTable("Opinion", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.PermissionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("PermissionGroup", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Expiry")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.ProfileDocument", b =>
                {
                    b.Property<long>("JobProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.HasKey("JobProfileId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("ProfileDocument", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.ToTable("Rank", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("PermissionGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PermissionGroupId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RankId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Department", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Departments")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Department_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Document", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Documents")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Documnent_User");

                    b.HasOne("ProjectReview.Models.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Documnent_DocumentType");

                    b.Navigation("CreateUser");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.DocumentType", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentType_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Handler", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.Job", "Job")
                        .WithMany("Handlers")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_Handler_Job");

                    b.HasOne("ProjectReview.Models.Entities.User", "User")
                        .WithMany("Handlers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Handler_User");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("CreateJobs")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_CreateUser");

                    b.HasOne("ProjectReview.Models.Entities.Document", "Document")
                        .WithOne("Job")
                        .HasForeignKey("ProjectReview.Models.Entities.Job", "DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_Document");

                    b.HasOne("ProjectReview.Models.Entities.User", "Host")
                        .WithMany("HostJobs")
                        .HasForeignKey("HostId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_HostUser");

                    b.HasOne("ProjectReview.Models.Entities.User", "Instructor")
                        .WithMany("InstructorJobs")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_InstructorUser");

                    b.Navigation("CreateUser");

                    b.Navigation("Document");

                    b.Navigation("Host");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.JobProfile", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("JobProfiles")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_JobProfile_User");

                    b.HasOne("ProjectReview.Models.Entities.Profile", "Profile")
                        .WithMany("JobProfiles")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_JobProfile_Profile");

                    b.Navigation("CreateUser");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Opinion", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Opinions")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Opinion_User");

                    b.HasOne("ProjectReview.Models.Entities.Job", "Job")
                        .WithMany("Opinions")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_Opinion_Job");

                    b.Navigation("CreateUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.PermissionGroup", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PermissionGroup_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Position", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Positions")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Position_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Profile", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Profiles")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.ProfileDocument", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.Document", "Document")
                        .WithMany("ProfileDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_ProfileDocument_Document");

                    b.HasOne("ProjectReview.Models.Entities.JobProfile", "JobProfile")
                        .WithMany("ProfileDocuments")
                        .HasForeignKey("JobProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_ProfileDocument_JobProfile");

                    b.Navigation("Document");

                    b.Navigation("JobProfile");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Rank", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Ranks")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rank_User");

                    b.Navigation("CreateUser");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.User", b =>
                {
                    b.HasOne("ProjectReview.Models.Entities.User", "CreateUser")
                        .WithMany("Users")
                        .HasForeignKey("CreateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_CreateUser");

                    b.HasOne("ProjectReview.Models.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("ProjectReview.Models.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Users")
                        .HasForeignKey("PermissionGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_User_PermissionGroup");

                    b.HasOne("ProjectReview.Models.Entities.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Position");

                    b.HasOne("ProjectReview.Models.Entities.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Rank");

                    b.Navigation("CreateUser");

                    b.Navigation("Department");

                    b.Navigation("PermissionGroup");

                    b.Navigation("Position");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Document", b =>
                {
                    b.Navigation("Job")
                        .IsRequired();

                    b.Navigation("ProfileDocuments");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Job", b =>
                {
                    b.Navigation("Handlers");

                    b.Navigation("Opinions");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.JobProfile", b =>
                {
                    b.Navigation("ProfileDocuments");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.PermissionGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Profile", b =>
                {
                    b.Navigation("JobProfiles");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectReview.Models.Entities.User", b =>
                {
                    b.Navigation("CreateJobs");

                    b.Navigation("Departments");

                    b.Navigation("DocumentTypes");

                    b.Navigation("Documents");

                    b.Navigation("Handlers");

                    b.Navigation("HostJobs");

                    b.Navigation("InstructorJobs");

                    b.Navigation("JobProfiles");

                    b.Navigation("Opinions");

                    b.Navigation("PermissionGroups");

                    b.Navigation("Positions");

                    b.Navigation("Profiles");

                    b.Navigation("Ranks");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
